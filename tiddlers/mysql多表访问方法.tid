created: 20220616023346167
creator: TidGiUser
difficulty: 5
due: 20220623111753391
grade: -1
history: []
interval: 0
lapses: 0
modified: 20220621111753391
modifier: TidGiUser
reps: 1
retrievability: 1
review: 20220621111753391
stability: 2
tags: mysql查询优化 fx ?
title: mysql多表访问方法
type: text/vnd.tiddlywiki


! 内连接和外连接
笛卡尔积：驱动表中查到的记录和被驱动表中查到的记录都会连接

内连接：驱动表中记录在被驱动表中找不到匹配记录，该记录的结果不会加入到结果集中

外连接：驱动表中记录在被驱动表中找不到匹配记录，该记录的结果也会加入到结果集中

左外右外，区别就是谁当驱动表


! 嵌套循环连接，最简单笨拙的方法

select * from t1,t2 where t1.m1 > 1 and t1.m1 = t2.m2 and t2.n2 < 'd'

1.确定驱动表，并且先查出只涉及t1条件的记录，即满足t1.m1 > 1的所有记录

2.针对1中结果集内的每条记录，分别到t2表中查找匹配的记录

''1中结果集的记录数确定了，因此需要优化的还是被驱动表的访问效率''

! 基于块的嵌套循环连接：减少被驱动表重复装入内存
扫描一个表的过程其实是先把这个表从磁盘上加载到内存中，然后从内存中比较匹配条件是否满足。

> 也就是前面的row_mvcc_search在执行的时候，是需要把表先读到内存里的

但是，内存里可能放不下整张表，所以就会以页为单位读取

采用嵌套循环连接算法的两表连接过程中，被驱动表可是要被访问好多次的，那就相当于要从磁盘上读好几次这个表，这个I/O代价就非常大了，所以我们得想办法：''尽量减少访问被驱动表的次数。''

> 嵌套循环连接中，驱动表的结果集条数固定，似乎就没办法减少被驱动表的访问次数

解决思路：嵌套循环连接中，每次访问被驱动表，被驱动表的记录会被加载到内存中，''在内存中的每一条记录只会和驱动表结果集的一条记录做匹配，之后就会被从内存中清除掉''，所以我们可不可以在把被驱动表的记录加载到内存的时候，''一次性和多条驱动表中的记录做匹配''，这样就可以大大减少重复从磁盘上加载被驱动表的代价了。

join buffer：就是执行连接查询前申请的一块固定大小的内存，先把若干条驱动表结果集中的记录装在这个join buffer中，然后开始扫描被驱动表，每一条被驱动表的记录一次性和join buffer中的多条驱动表记录做匹配

''这就引出了另一个优化的策略：''尽可能在join buffer中装入更多的驱动表查询结果，最好的情况是都能装入，''这样对被驱动表只需要进行1次单表扫描''

驱动表的记录并不是所有列都会被放到join buffer中，只有查询列表中的列和过滤条件中的列才会被放到join buffer中，所以再次提醒我们，最好不要把*作为查询列表，这在介绍[[index|mysql单表访问方法]]时也有提到

join buffer的大小是可以通过启动参数或者系统变量join_buffer_size进行配置，默认大小为262144字节（也就是256KB），最小可以设置为128字节





