created: 20220706074510641
creator: TidGiUser
modified: 20220706140714252
modifier: TidGiUser
tags: mysql主从复制与读写分离
title: 01.binlog和redo log的区别
type: text/vnd.tiddlywiki


! 主要不同点

1. 适用对象不同
bin log 是 MySQL 的 Server 层实现的，所有引擎都可以使用

而 redo log 是 InnoDB 引擎特有的

2. 写入内容不同

bin log 是逻辑日志，记录的是这个语句的原始逻辑，比如 “给 id = 1 这一行的 age 字段加 1”

redo log 是物理日志，记录的是 “在某个数据页上做了什么修改”

3）写入方式不同：

bin log 是可以追加写入的。“追加写” 是指 bin log 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志

redo log 是循环写的，空间固定会被用完

! 为什么说bin log不具备崩溃恢复的能力
''注意:为什么说bin log不具备崩溃恢复的能力:''

''mysql崩溃恢复的要点在于: 丢失的数据就是buffer pool中事务已经完成但是没来得及刷盘的数据''

可以看到，redo log 和 bin log 的一个很大的区别就是，一个是循环写，一个是追加写。也就是说 redo log 只会记录未刷入磁盘的日志，已经刷入磁盘的数据都会从 redo log 这个有限大小的日志文件里删除。

而 bin log 是追加日志，保存的是全量的日志。这就会导致一个问题，那就是没有标志能让 InnoDB 从 bin log 中判断哪些数据已经刷入磁盘了，哪些数据还没有。

举个例子，bin log 记录了两条日志：

记录 1：给 id = 1 这一行的 age 字段加 1
记录 2：给 id = 1 这一行的 age 字段加 1

假设在记录 1 刷盘后，记录 2 未刷盘时，数据库崩溃。

''binlog并不知道buffer pool中哪些数据刷盘了'',重启后，只通过 bin log 数据库是无法判断这两条记录哪条已经写入磁盘，哪条没有写入磁盘，不管是两条都恢复至内存，还是都不恢复，对 id = 1 这行数据来说，都是不对的。

但 redo log 不一样，只要刷入磁盘的数据，都会从 redo log 中被抹掉，当数据库发生宕机时，数据库不需要重做所有的日志，因为Check Point之前的页都已经刷新回磁盘，只需对Check Point后的redo log进行恢复，从而缩短了恢复的时间直接把 redo log 中的数据都恢复至内存就可以了。
---
binlog还原数据适用的场景: 比如用delete误删了, 那么用全量备份,执行自该次备份后产生的binlog日志，直到我们写DELETE语句之前的binlog日志为止

