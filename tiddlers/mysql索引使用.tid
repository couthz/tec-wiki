created: 20220616011723245
creator: TidGiUser
difficulty: 5
due: 20220623111750717
grade: -1
history: []
interval: 0
lapses: 0
modified: 20220621111750717
modifier: TidGiUser
reps: 1
retrievability: 1
review: 20220621111750717
stability: 2
tags: mysql查询优化 fx ?
title: mysql索引使用
type: text/vnd.tiddlywiki

! 索引类型

从索引存储结构划分：B Tree索引、Hash索引、FULLTEXT全文索引、R Tree索引

从应用层次划分：普通索引、唯一索引、主键索引、复合索引

从索引键值类型划分：主键索引、辅助索引（二级索引）

从数据存储和索引键值逻辑关系划分：聚集索引（聚簇索引）、非聚集索引（非聚簇索引）

! 索引使用的代价
1. 空间代价

2. 时间代价：增删改操作的时候需要维护索引，索引越多，增删改的性能可能越差

! 能够使用索引的情况

1. 总结一下联合索引使用的条件：

（1）符合最左原则，搜索条件必须是联合索引的最左连续列

（2）只有最右边的条件可以是范围查询，其他都是等值查询

''完全可以把单列的索引看成以上的特殊情况：例如可以匹配范围值''

2. 匹配列前缀：like 'abc%' 就可以用到索引，like '%abc%' 就不可以用到索引

3. 用于排序

order by。。。 limit

如果用不到索引，就只能把聚簇索引的记录全部拿过来进行排序，再取limit，有了索引就可以避免排序

（1）依然是最左原则，order by后面跟的是联合索引的最左连续列

（2）所有列排序方向相同，不能有的aesc，有的desc

（3）多个列不能分属于不同索引（''索引合并不适用于这种情况''）

（4）列不能再被修饰。order by upper（name）

4. 用于分组

''B+树天生就是排好序，同时分好组的''

group by name，birtyday，number，就是先按name分组，name相同的按birtyday再分组，birtyday相同的再按number分组，完全符合B+树的结构

注：依然是最左原则

! 二级索引+回表 vs 全表扫描 vs 索引合并 vs 覆盖索引

这里就要回顾一下[[mysql单表访问方法]]了

ref，ref_or_null,range都可能是二级索引+回表的方式，索引虽然减少了扫描的条数，但是回表涉及到随机IO，性能较差

全表扫描 all，扫描的条数多，但是不涉及随机IO

intersection索引合并本质上是单个索引的结果集太多，为了减少了回表，但是增加了扫描其他索引列和取交集的开销（很快）

union合并本质上是为了避免全表扫描，并且用了索引之后结果集可以显著减少的情况，但增加了扫描其他索引列和取并集的开销（很快）

sorted_union本质上也是为了避免全表扫描，并且用了索引之后结果集可以显著减少的情况，但增加了扫描其他索引列，排序结果集和取并集的开销

覆盖索引，也就是index查询，只需要扫描二级索引

! 如何挑选索引

1. 只为用于搜索，排序，分组的列建立索引

> 去看看where, order by, group by后面都跟哪些列，设计两到三个联合索引，让每个查询条件的列，都是某个索引列中的最左连续列

2. 考虑列的基数

基数越大，列的值越分散，这样使用ref，range查询时，回表次数就会更少

3. 索引列的类型尽量小

（1）cpu层面：数据类型小，查询的时候比较操作更快

（2）IO层面：一个页能装更多索引，更少的磁盘IO

4. 字符串前缀索引

如果在字符串上建立索引可能出现3遇到的问题，所以可以对前缀建立索引

语法：KEY idx_name (name(10))

注意：
（1）节约空间，减少了比较时间，但是有可能增加回表，''因此适用于前10个字符就能锁定很小范围数据的情况''

（2）但是，不能用于排序和分组，因为包含的字符不全''（但是等值匹配，范围匹配对顺序是没有要求的，只需要定位到相应前缀所在的位置，再回表就可以了）''

5. 让索引列在表达式中单独出现，不要加函数或者计算

6. 主键列最好自增插入，避免中间插入，造成页分裂等现象

7. 避免冗余重复索引

例如建立联合索引key1(a,b,c),就不需要再建立索引key2(a),''利用key1就可以对列a进行快速搜索了，key1和key2相比无非就是分的组更细了，但是a都是全局有序的（b，c只是在组内有序）''






