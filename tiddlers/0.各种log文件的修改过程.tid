created: 20220706140719200
creator: TidGiUser
modified: 20220706144322579
modifier: TidGiUser
tags: mysql主从复制与读写分离
title: 0.各种log文件的修改过程
type: text/vnd.tiddlywiki

! 复习:一次读取或修改的物理流程

MySQL其实是分成server层和存储引擎层两部分，每当执行一个查询时，server层负责解析sql语句,生成执行计划，即选取即将使用的索引以及对应的扫描区间。然后调用存储引擎的接口

当server层查询优化器形成执行计划之后,会根据扫描区间''每条记录''逐个调用innodb的接口去要记录,核心函数是row_search_mvcc(''注意有可能会把数据存入buffer pool'')(> 注意,在这个流程中,定位一条记录的函数是,在[[04.mysql是怎么加锁的？？]]这里有提到),然后返回server层. server层会比较''更新前后的数据是否一致'',不一致的话才会调用存储引擎接口去更新数据

然后, innodb的更新数据接口内部执行的物理流程如下:

<<<
1. 首先先修改undo log,注意(mysql把对底层页面的一次原子修改称作一个Mini Trasaction，即MTR。一个MTR中包含若干条redo日志),所以说实际上''虽然先修改Undo页面，后写redo日志，但是此时InnoDB并不认为Undo页面是脏页''，就不会将其刷新到硬盘，''redo日志也没有写入到redo log buffer''，这些redo日志也不会被刷新到redo日志文件。''只有当MTR提交时，才先将redo日志复制到redo log buffer，再将修改的Undo页面加入到flush链表。''

''所以我们可以粗略的认为修改Undo页面的redo日志是先写的，而修改页面的过程是后发生的。''

2. 然后修改页面, 也是一个MTR, 也可以粗略的''先记录修改页面的redo日志，然后再真正的修改页面''

> 更新二级索引记录时不会再记录undo日志，但由于是在修改页面内容，会先记录相应的redo日志

3. 写binlog, 此时记录的binlog日志并不会被写到binlog日志文件中，而是被暂时保存到内存的某个地方，等之后事务提交的时候才会真正将该事物执行过程中产生的所有binlog统一写入binlog日志文件

4. 两阶段提交
<<<

> 事务的持久性由redo log保证, 原子性由undo log保证,详见[[01.事务隔离级别]]


[img[截屏2022-07-06 16.31.50.png]]


