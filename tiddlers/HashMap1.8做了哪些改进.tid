created: 20220618072909937
creator: TidGiUser
difficulty: 5
due: 20220623111819620
grade: -1
history: []
interval: 0
lapses: 0
modified: 20220621111819620
modifier: TidGiUser
reps: 1
retrievability: 1
review: 20220621111819620
stability: 2
tags: fx HashMap ?
title: HashMap1.8做了哪些改进
type: text/vnd.tiddlywiki

> ''底部数据结构, 插入方式, 扩容方式, 扩容时机''

! 概述
1. 底层数据结构不一样，1.7是数组+链表，1.8则是数组+链表+红黑树结构（当链表长度大于8，转为红黑树）。

2. JDK1.8中resize()方法在表为空时，创建表；在表不为空时，扩容；而JDK1.7中resize()方法负责扩容，inflateTable()负责创建表。

3. 1.8中没有区分键为null的情况，而1.7版本中对于键为null的情况调用putForNullKey()方法。但是两个版本中如果键为null，那么调用hash()方法得到的都将是0，所以键为null的元素都始终位于哈希表table【0】中

4. 当1.8中的桶中元素处于链表的情况，遍历的同时最后如果没有匹配的，直接将节点添加到链表尾部；而1.7在遍历的同时没有添加数据，而是另外调用了addEntry()方法，将节点添加到链表头部。

5. 1.7中新增节点采用头插法，1.8中新增节点采用尾插法。这也是为什么1.8不容易出现环型链表的原因。

6. 1.7中是通过''更改hashSeed值''修改节点的hash值从而达到rehash时的链表分散，而1.8中键的hash值不会改变，rehash时根据（hash&oldCap）==0将链表分散。

7. 1.8rehash时保证原链表的顺序，而1.7中rehash时有可能改变链表的顺序（头插法导致)

8. 在扩容的时候：1.7在插入数据之前扩容，而1.8插入数据成功之后扩容。

! 1.7在扩容时采用头插法为什么会导致环形链表

1.7 扩容的核心逻辑在transfer()里,会遍历每个桶位的链表,对于单独的链表每个元素e执行的逻辑如下:

1. 用next暂存下一个元素 next = e.next

2. 重新算下标值i,插入头部:e.next = newTable[i], newTable[i] = e;

3. e = next, 指向下一个元素,重新来一遍,直到e == null

例子:

这里假设有一个链表a-b-c,''并且假设整个链表rehash之后都没变槽位''

有两个线程同时开始rehash,线程一完成rehash之后,变为c-b-a,线程二完成第一步之后被打断

线程二这时重新开始,e还指向a,这时执行第二步,会将e.next 指向 c,环形链表形成