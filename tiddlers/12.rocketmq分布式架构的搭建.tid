created: 20220629060257268
creator: TidGiUser
modified: 20220701031934857
modifier: TidGiUser
tags: rocketmq fx
title: 12.rocketmq分布式架构的搭建
type: text/vnd.tiddlywiki

! 概述
[img[截屏2022-06-29 15.15.37.png]]

高并发(吞吐量),海量数据存储, 高可用(主从不切换的情况下?) 应该是依托于多master模式的

kafka吞吐量,应该是依托于多partition, 并且部署到多个broker上
--
结合部署架构图，描述集群工作流程:
启动NameServer，NameServer起来后监听端口，等待Broker、Producer、Consumer连上来， 相当于一个路由控制中心。

Broker启动，跟所有的NameServer保持长连接，定时发送心跳包。心跳包中包含当前Broker信息 (IP+端口等)以及存储所有Topic信息。注册成功后，NameServer集群中就有Topic跟Broker的映射 关系。

收发消息前，先创建Topic，创建Topic时需要指定该Topic要存储在哪些Broker上，也可以在发送 消息时自动创建Topic(''一般还是在控制台手工创建, 自动创建会关闭'')。 

Producer发送消息，启动时先跟NameServer集群中的其中一台建立长连接，并从NameServer中获取当前发送的Topic存在哪些Broker上，''轮询从队列列表中选择一个队列，然后与队列所在的Broker建立长连接从而向Broker发消息''。 

>''发之前就确定一个queue了????kafka是什么样的??[[生产者负载均衡??|01.kafka架构设计]]''

Consumer跟Producer类似，跟其中一台NameServer建立长连接，获取当前订阅Topic存在哪些 Broker上，然后直接跟Broker建立连接通道，开始消费消息。

! 用docker-compose一键搭建

他妈的, 浪费那么多时间也没看出来,为什么slave自己会变成master

