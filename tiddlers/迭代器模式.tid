created: 20220618082322215
creator: TidGiUser
difficulty: 5
due: 20220623111826641
grade: -1
history: []
interval: 0
lapses: 0
modified: 20220621111826641
modifier: TidGiUser
reps: 1
retrievability: 1
review: 20220621111826641
stability: 2
tags: 设计模式 fx ?
title: 迭代器模式
type: text/vnd.tiddlywiki

[img[截屏2022-06-18 16.36.10.png]]

! 简单使用
注意这里是使用了组合,将容器的实现类作为迭代器的一个属性,并且将遍历容器的逻辑写在迭代器里面:
[img[截屏2022-06-18 16.59.33.png]]

[img[截屏2022-06-18 16.56.01.png]]

! 迭代器模式的好处

简单的数据结构写fori循环还可以,如果是复杂的数据结构,遍历代码写在客户端会很复杂.写在容器中不符合单一职责和开闭原则

如果使用迭代器模式,假如想给容器增加一种遍历方式,不需要更改容器代码,只需要实现一个新的迭代器类即可

! modcount变量的作用

为什么不能在遍历过程中增加或删除?

1. 假如遍历list过程中删除元素:调用next()方法之后,游标cursor会指向下一个即将访问的元素b,这时删除元素a会导致所有元素前移,那么此时游标会指向c,''导致b永远遍历不到''
[img[截屏2022-06-18 17.00.58.png]]

2. 增加元素其实同理,也是往cursor之前添加元素,会导致某元素添加两遍
[img[截屏2022-06-18 17.01.09.png]]

解决:每次调用next时先检查modCount是不是变化了

! 安全的remove?鸡肋方法
list迭代器的remove方法比较鸡肋, 删除的是上次next获取的元素,所以一次next之后只能使用一次

每次调用next会将lastret指向刚刚访问的元素,并将cursor指向下一个元素

remove其实会调用容器的remove删除lastret指向的元素,并且把cursor前移(因为元素整体往前移动了),防止上一节中提到的漏掉元素的情况
[img[截屏2022-06-18 17.07.04.png]]




